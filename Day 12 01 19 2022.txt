Notes Day 12
01/19/2022

Bootstrap CSS Framework:
	Why write your own CSS when you can steal someone else's?  Bootstrap
is an opensource CSS framework that you can apply to your web pages to have
pre-built styling.
	Bootstrap takes a mobile first appoarch, so it is designed to display
everything well on a mobile device and then scale that up for a larger
device.  Bootstrap is reactive to the size of the viewport.
	Bootstrap is class-based.  So to apply styling you need to give
your HTML elements a particular class attributes.  Note that this means that
to override the styling you need to use either your own class selector or
an id selector.
	There are two main ways to include Bootstrap in your webpage.
		You can download and host it locally
		you can link the hosted style sheet (the CDN) in the
header of your webpage.
	
Bootstrap Grid System:
	Bootstrap uses a layout called the grid system to define how
the elements will appear on the page in relation to each other and the
viewport size.  This allows for the reactive nature of Bootstrap.
	Containers are the basic element.  Every element of the webpage that
is displayed should be in a container.  There are two types:
		Container - Has a fixed width that it will expand to.
		Container-fluid - Will fill any viewport width.
	Rows are horizontal slices of the container.  Rows have a base
size of 12.
	Columns are vertical sections of the Row with a dynamic width
depending on the size they are given.  A row then can have a maximum
of 12 columns.  Columns however can have a larger size then 1 which allows
you to space out elements in relation to each other.  For instance if you
want 3 columns to be equally spaced on the row you can give them all a size
of 4.
		e.g. class="col-sm-3" gives a column the default size small (this
determines the minimum size the element will shrink to) with a size of
3 of 1/4 of the row of the screen.

Bootstrap Elements:
	Bootstrap has extensive styling for various types of specific elements beyond
its generic styling.  Tables, froms, buttons, and navbars all have particular
styling classes.
	Tables:
	Forms:
	Buttons:
	There is a base "navbar" for navbars.

JavaScript(JS)
	It is not Java.
	JavaScript is a high-level programming language generally used for
front-end development.  It has built-in support with all web browsers.
		It is possible to do server-side JS with NodeJS and plenty
of applications do.
	JS is multi-paradigm - it can do prodedural programming, functional programming,
and some OOP.
	JS is weakly and lossely typed.
	The official language specification for JS are called ECMAScript.
This is really only important to know when talking about versioning.
Versions of JS are referred to as ES#
		e.g. ES6 or ES2019.
	HTML supports the use of JS with the <script> tag.  This allows you to
put raw JS in your HTML document or much more often allows you link to a
separate JS file that will be run.
		Script tags can go in the head or the body of the document.
However, generally it is best to load the elements of the page before your JS runs
therefore, usually it is included at the bottom of the body.
	JS was originally designed in a very short period of time. (The legend
is that it took 10 days to write the pitch demo, but it still was only written
in a matter of months).  This means that the language has some inherent quirks
that resulted from this frantic development and have been maintained to
this day mostly due to backwards compatibility issues.
	JS is traditionally considered an interpreted language instead of
a compiled one.
	OPTIONAL: JavaScript memorey: https://dev.to/narottam04/how-javascript-works-visually-explained-269i
	Video that talks about some JS quirks: https//www.destroyallsoftware.com/talks/wat

JS Syntax:
	Comments are the same as Java(// and /*)
	JavaScripts literals (primitives) are your fixed values.  They can
be numbers, strings, booleans, ect.
	JS has keywords like other languages such as:
		break,
		catch,
		do,
		if,
		else,
		etc.
	Control flow statements are generally the same as Java.  The exception
will be there are two types of enhanced for-loops.
	Variables are loosely typed so do not have a type declaration.
	Semicolons end lines (although generally the browser will infer these
if they are left off).
	
JS Variables:
	Variables store values and use the "=" for assignments.
		Variable names must start with a letter, an underscore,
or a $.  They cannot start with numbers but can contain them.
	There are three ways to declare variables in JS. (Note: let and const
were added int ES6).
		var - The older, default declaration.
		let - newer and peferred declaration for mutable variables.
		const - functions as let but can not be changed after
assignment. (i.e. the same as a final variable in Java).
	Scopes - There are three variable scopes in JS but var can only be scoped
to two of them.
		Global - This is the widest scope; the variable is visable
throughout the whole script.
		Functional - A variable that exists only within a function.
		Block - The variable is only visible in a particular block
of code like an if statement.  These blocks can be at the global level or in a
function.  Only let and const can be blocked scoped.
	There are 7 major datatypes in JS:
		number - includes all numeric values: intergers and
floating point numbers.
		string - collection of characters.
		boolean - true/false.
		undefined - A variable has this type/value when it has not
yet received assignement.
		null - has no value.
		object - objects in JS are simply key/value pairs.  The keys
and values are defined within curly braces and separated by a colon.  The value
of a key can be another object.  Object are not required to have a defined class.
			e.g. let myObj={name:"tim", eyeColor:"hazel"};
		Symbol - added in ES6 and isn't commonly used.
	Other datatypes or sub-datatypes includes:
		BigInt - Is used to hold number integer values to large
to be stored in a number.
		NaN(Not a Number) - is a value type of a number.  This is returned
instead of throwing an error when a mathematical operation is not possible.
		infinity and -infinity are numeric values in JS.  They are most
often seen when you divide by 0.
		Object sub-types:
			Arrays - These are objects with predefined keys that are the
indices.  They are not restricted by type and have a mutable length.  Arrays are
basically the only built-in data structure in JS.
			Dates are type of object that hold a specific date
			Functions are technically objects.  This allows them to
be passed as parameters like Lambdas in Java.
				Classes are technically special funtions in JS.
They wre added later in JS.
		There is a "typeof" operator that can be used to check the type
of the value when necessary.

Type Coercion:
	This is the process of converting values between datatypes.  JS does
this often implicitly
	You can do this explicitly in JS.  The syntax is:Number("3") to make a
string a number or string (123) would make "123".
	The most common place where coercion happens is in equality testing in JS.
Also it will happen when using the + operator which different types.

JS Operators:
	Comparison operators are almost all the same as Java (>, <, >=, <=,
!=) except for == and ===.
		=== will take types into consideration for equality.
== will try type coercion to see if two variables are the same just as
different data types.
			e.g 6==="6" is false but 6=="6" is true.
	Otherwise the assignment(=, += ect) logical(&& || etc) arithmetic
(+,/,%,++,--) ternary(a?b:c) operators are all the same as Java.

Truthy/Falsey values:
	In JS any expression or value can be evaluated as a boolean.
We use the terms truthy and falsey to indicate what things will be evaluated
as
	There are 6 values that return false:
		An empty string "",''
		undefined
		null
		NaN
		0
		false
	Everything else evaluates as true.

JS Functions:
	A function is a reusable set of instructions that can be called
anywhere within the scope that the function was declated in. Functions are
hoisted sto they cannot be block scoped.
		Function and vars have their declarations raised to the top
of the scope (global or function) when the script is run.  This does not 
however also hoist assignment.
	You can declare a function with the function keyword.  You can then
also choose to give it a name. Functions are objects so they can also be assigned
to variables.  Functions can also be declared to take any number of
inputs
		Functions do not require names.  However, if you want to use an anonymous
(nameless) function you will need to assign it to a variable that can be called.
	Functions can return values with a returns keyword but do not require declaring
a return type.
	Arrow functions are generally "one time use" functions declared inline
as anonymous functions.
		They are called arrow functions because you use the "=>"
to make an arrow syntactically:
			e.g. (inp!)=>{console.log("I'm an arrow function");}
		Arrow functions can be passed into other functions or stored
in variables.
	A function passed into another function as an input and then called by
the function it was passed into are called "callback" functions.
		This is the core idea of functional programming.  The ability
to pass functions around in other functions to expand functionality is
the basis for the whole paradigm.
	Closures - This is an old way of achieving encapsulation in Js.  It
requires a nested function to work.
		The outer function will define some values/variables.  The
inner function since it is scoped to the outer function will be able to read
those variables.  the outer function then returns the inner function.  At that point,
there is no way for the inner function to change the values of the outer function,
essentially making them constanct.
		Const and access modifiers have made this much less common as
a design choice in modern JS.

This keyword:
	In JS this can mean different things depending on where it is used.
	"this" in no other particular context will refer to the "Global Object".
(This is the "window" object).
	"this" in event handlers refers to the HTML element that receives the
event.
		e.g.<button onclick="this.style.backgroundColor='green'"> click here to
turn the button green. </button> this refers to the button itself.
	"this" in Object Method Binding (generally a constructor for a class)
refers to the object like it does in Java.
		e.g. this.name=name;
	In functions "this" can have different meanings depending on the type
of function it is (if it used the function keyword or is an arrow function).

Strict mode:
	Declaring simply "use strict" at the top of a JS script will force
the script run in "strict mode" that was designed to make JS a bit less quirky.
	Strict mode will not let you call a variable before it is declared in
the script.  Also, it will not let you use keywords that are not reserve
words as variable/function names.  There are some other edge case effects.
	Strict mode was added in ES5.

Template Literals:
	In JS instead of just concatenating strings you have the option to 
use template literals that are declared with backticks`...`.
	The template literal allows you to embed programmatic expressions
or variables into the string.
		e.g. `Hi my name is ${name}.` will insert whatever value is
in the variable name into the string.
		Also programmatically
			x=5
			y=3
			let results = `the product of ${X} and ${Y} is ${X*Y}.`
result then holds "The product of 5 and 3 is 15."

For-in/for-of loops:
	There are two special for loops, on generally for arrays and one 
for objects.
	For-in: iterates over and object's keys:
		let person = {name ="mike", age=15}
		for(let key in person){console.log(person[key]0;} // this prints mike and 15.
	For-of: iterates over the values in an array.
		let arr=["mike", 12, true];
		for(let value of arr){console.log(value);)} //prints mike 12 true.